//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""MechControls"",
            ""id"": ""323c9567-0147-4e0d-9bb7-6bc8612bbe77"",
            ""actions"": [
                {
                    ""name"": ""LateralMove"",
                    ""type"": ""Value"",
                    ""id"": ""169d37d2-0f67-4768-bea0-1e943d83ca62"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""Value"",
                    ""id"": ""44d48b31-cb65-42a3-885a-79733213413c"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""26d91024-8769-4929-8403-0b86cd85e9ba"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftMainWeaponFire"",
                    ""type"": ""Button"",
                    ""id"": ""9acf0e7a-37b6-4f48-a4dc-570212338a42"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftMainWeaponReload"",
                    ""type"": ""Button"",
                    ""id"": ""1e38d953-d8a6-4d81-8e83-c51d33e8e072"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightMainWeaponFire"",
                    ""type"": ""Button"",
                    ""id"": ""cc82975b-d38e-4009-8bda-9250fb29ddb5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightMainWeaponReload"",
                    ""type"": ""Button"",
                    ""id"": ""32240c02-7dfa-4358-a4aa-23bb741c7ccd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseEquipmentOne"",
                    ""type"": ""Button"",
                    ""id"": ""a0b1c0dd-53dc-481e-bd0d-60b43eb487b2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseEquipmentTwo"",
                    ""type"": ""Button"",
                    ""id"": ""fe6881bb-a5aa-428f-8917-3f8b7ab877e7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""3fb87cc9-a5f6-46ee-86b5-e843ae851dd2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleStrafeThrusters"",
                    ""type"": ""Button"",
                    ""id"": ""481cf499-1afd-437d-9d68-b172114e48b2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleTargetFocus"",
                    ""type"": ""Button"",
                    ""id"": ""2ecad43b-c2cc-47b5-a087-3e490ef71cb6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Melee"",
                    ""type"": ""Button"",
                    ""id"": ""8534e52b-3faa-4e90-a07c-ca9744b14a39"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RepairPack"",
                    ""type"": ""Button"",
                    ""id"": ""736bb193-642c-429f-b1ce-5102fe4e3e9d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""065417e3-5e1a-4e86-ba45-1b283be1db84"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LateralMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ed406062-5af0-405b-ad45-5241b2621d80"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""53d17643-1fae-4f5e-a626-c26b0acc673f"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftMainWeaponFire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dedd6a2e-d4c6-48b9-81df-3d9fcf56b59e"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftMainWeaponReload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3ffdb28a-f13f-4468-827e-fa05cb044274"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightMainWeaponFire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""63337b1e-029d-4ac8-8251-b3257018423a"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightMainWeaponReload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0cb30858-1b75-451c-bd28-de514a41af50"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseEquipmentOne"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0f289f7a-8e02-4962-be07-2e092f60cfa9"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""94e0ad6c-3f63-4f82-91c6-30812616463f"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseEquipmentTwo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7fc3d87e-245c-4735-8818-c96a5f278079"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleStrafeThrusters"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0179a7a1-6e58-4fc0-925e-60d8bcb8d38a"",
                    ""path"": ""<Gamepad>/rightStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleTargetFocus"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""603d5626-8f33-4e2e-bc05-8434131a0c4e"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Melee"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""be16a05a-37db-4cc5-a9e4-98443a6eb4f5"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""52cad4b8-c985-4cb9-a95a-40a9c362735f"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RepairPack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PersistentControls"",
            ""id"": ""a57cce2b-e711-4cb0-b6bf-60040ef492ef"",
            ""actions"": [
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""a9e0c90f-4932-48bb-acc0-1603e4ac43a3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleInfo"",
                    ""type"": ""Button"",
                    ""id"": ""ad630f99-59ae-4560-acdd-33b5bd0fbea2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""13651fab-7599-4510-b630-472e517c047b"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""31a9821a-8af7-4454-8473-00df40717b4c"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleInfo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MechControls
        m_MechControls = asset.FindActionMap("MechControls", throwIfNotFound: true);
        m_MechControls_LateralMove = m_MechControls.FindAction("LateralMove", throwIfNotFound: true);
        m_MechControls_Aim = m_MechControls.FindAction("Aim", throwIfNotFound: true);
        m_MechControls_Jump = m_MechControls.FindAction("Jump", throwIfNotFound: true);
        m_MechControls_LeftMainWeaponFire = m_MechControls.FindAction("LeftMainWeaponFire", throwIfNotFound: true);
        m_MechControls_LeftMainWeaponReload = m_MechControls.FindAction("LeftMainWeaponReload", throwIfNotFound: true);
        m_MechControls_RightMainWeaponFire = m_MechControls.FindAction("RightMainWeaponFire", throwIfNotFound: true);
        m_MechControls_RightMainWeaponReload = m_MechControls.FindAction("RightMainWeaponReload", throwIfNotFound: true);
        m_MechControls_UseEquipmentOne = m_MechControls.FindAction("UseEquipmentOne", throwIfNotFound: true);
        m_MechControls_UseEquipmentTwo = m_MechControls.FindAction("UseEquipmentTwo", throwIfNotFound: true);
        m_MechControls_Dash = m_MechControls.FindAction("Dash", throwIfNotFound: true);
        m_MechControls_ToggleStrafeThrusters = m_MechControls.FindAction("ToggleStrafeThrusters", throwIfNotFound: true);
        m_MechControls_ToggleTargetFocus = m_MechControls.FindAction("ToggleTargetFocus", throwIfNotFound: true);
        m_MechControls_Melee = m_MechControls.FindAction("Melee", throwIfNotFound: true);
        m_MechControls_RepairPack = m_MechControls.FindAction("RepairPack", throwIfNotFound: true);
        // PersistentControls
        m_PersistentControls = asset.FindActionMap("PersistentControls", throwIfNotFound: true);
        m_PersistentControls_Pause = m_PersistentControls.FindAction("Pause", throwIfNotFound: true);
        m_PersistentControls_ToggleInfo = m_PersistentControls.FindAction("ToggleInfo", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MechControls
    private readonly InputActionMap m_MechControls;
    private List<IMechControlsActions> m_MechControlsActionsCallbackInterfaces = new List<IMechControlsActions>();
    private readonly InputAction m_MechControls_LateralMove;
    private readonly InputAction m_MechControls_Aim;
    private readonly InputAction m_MechControls_Jump;
    private readonly InputAction m_MechControls_LeftMainWeaponFire;
    private readonly InputAction m_MechControls_LeftMainWeaponReload;
    private readonly InputAction m_MechControls_RightMainWeaponFire;
    private readonly InputAction m_MechControls_RightMainWeaponReload;
    private readonly InputAction m_MechControls_UseEquipmentOne;
    private readonly InputAction m_MechControls_UseEquipmentTwo;
    private readonly InputAction m_MechControls_Dash;
    private readonly InputAction m_MechControls_ToggleStrafeThrusters;
    private readonly InputAction m_MechControls_ToggleTargetFocus;
    private readonly InputAction m_MechControls_Melee;
    private readonly InputAction m_MechControls_RepairPack;
    public struct MechControlsActions
    {
        private @PlayerInput m_Wrapper;
        public MechControlsActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @LateralMove => m_Wrapper.m_MechControls_LateralMove;
        public InputAction @Aim => m_Wrapper.m_MechControls_Aim;
        public InputAction @Jump => m_Wrapper.m_MechControls_Jump;
        public InputAction @LeftMainWeaponFire => m_Wrapper.m_MechControls_LeftMainWeaponFire;
        public InputAction @LeftMainWeaponReload => m_Wrapper.m_MechControls_LeftMainWeaponReload;
        public InputAction @RightMainWeaponFire => m_Wrapper.m_MechControls_RightMainWeaponFire;
        public InputAction @RightMainWeaponReload => m_Wrapper.m_MechControls_RightMainWeaponReload;
        public InputAction @UseEquipmentOne => m_Wrapper.m_MechControls_UseEquipmentOne;
        public InputAction @UseEquipmentTwo => m_Wrapper.m_MechControls_UseEquipmentTwo;
        public InputAction @Dash => m_Wrapper.m_MechControls_Dash;
        public InputAction @ToggleStrafeThrusters => m_Wrapper.m_MechControls_ToggleStrafeThrusters;
        public InputAction @ToggleTargetFocus => m_Wrapper.m_MechControls_ToggleTargetFocus;
        public InputAction @Melee => m_Wrapper.m_MechControls_Melee;
        public InputAction @RepairPack => m_Wrapper.m_MechControls_RepairPack;
        public InputActionMap Get() { return m_Wrapper.m_MechControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MechControlsActions set) { return set.Get(); }
        public void AddCallbacks(IMechControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_MechControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MechControlsActionsCallbackInterfaces.Add(instance);
            @LateralMove.started += instance.OnLateralMove;
            @LateralMove.performed += instance.OnLateralMove;
            @LateralMove.canceled += instance.OnLateralMove;
            @Aim.started += instance.OnAim;
            @Aim.performed += instance.OnAim;
            @Aim.canceled += instance.OnAim;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @LeftMainWeaponFire.started += instance.OnLeftMainWeaponFire;
            @LeftMainWeaponFire.performed += instance.OnLeftMainWeaponFire;
            @LeftMainWeaponFire.canceled += instance.OnLeftMainWeaponFire;
            @LeftMainWeaponReload.started += instance.OnLeftMainWeaponReload;
            @LeftMainWeaponReload.performed += instance.OnLeftMainWeaponReload;
            @LeftMainWeaponReload.canceled += instance.OnLeftMainWeaponReload;
            @RightMainWeaponFire.started += instance.OnRightMainWeaponFire;
            @RightMainWeaponFire.performed += instance.OnRightMainWeaponFire;
            @RightMainWeaponFire.canceled += instance.OnRightMainWeaponFire;
            @RightMainWeaponReload.started += instance.OnRightMainWeaponReload;
            @RightMainWeaponReload.performed += instance.OnRightMainWeaponReload;
            @RightMainWeaponReload.canceled += instance.OnRightMainWeaponReload;
            @UseEquipmentOne.started += instance.OnUseEquipmentOne;
            @UseEquipmentOne.performed += instance.OnUseEquipmentOne;
            @UseEquipmentOne.canceled += instance.OnUseEquipmentOne;
            @UseEquipmentTwo.started += instance.OnUseEquipmentTwo;
            @UseEquipmentTwo.performed += instance.OnUseEquipmentTwo;
            @UseEquipmentTwo.canceled += instance.OnUseEquipmentTwo;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
            @ToggleStrafeThrusters.started += instance.OnToggleStrafeThrusters;
            @ToggleStrafeThrusters.performed += instance.OnToggleStrafeThrusters;
            @ToggleStrafeThrusters.canceled += instance.OnToggleStrafeThrusters;
            @ToggleTargetFocus.started += instance.OnToggleTargetFocus;
            @ToggleTargetFocus.performed += instance.OnToggleTargetFocus;
            @ToggleTargetFocus.canceled += instance.OnToggleTargetFocus;
            @Melee.started += instance.OnMelee;
            @Melee.performed += instance.OnMelee;
            @Melee.canceled += instance.OnMelee;
            @RepairPack.started += instance.OnRepairPack;
            @RepairPack.performed += instance.OnRepairPack;
            @RepairPack.canceled += instance.OnRepairPack;
        }

        private void UnregisterCallbacks(IMechControlsActions instance)
        {
            @LateralMove.started -= instance.OnLateralMove;
            @LateralMove.performed -= instance.OnLateralMove;
            @LateralMove.canceled -= instance.OnLateralMove;
            @Aim.started -= instance.OnAim;
            @Aim.performed -= instance.OnAim;
            @Aim.canceled -= instance.OnAim;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @LeftMainWeaponFire.started -= instance.OnLeftMainWeaponFire;
            @LeftMainWeaponFire.performed -= instance.OnLeftMainWeaponFire;
            @LeftMainWeaponFire.canceled -= instance.OnLeftMainWeaponFire;
            @LeftMainWeaponReload.started -= instance.OnLeftMainWeaponReload;
            @LeftMainWeaponReload.performed -= instance.OnLeftMainWeaponReload;
            @LeftMainWeaponReload.canceled -= instance.OnLeftMainWeaponReload;
            @RightMainWeaponFire.started -= instance.OnRightMainWeaponFire;
            @RightMainWeaponFire.performed -= instance.OnRightMainWeaponFire;
            @RightMainWeaponFire.canceled -= instance.OnRightMainWeaponFire;
            @RightMainWeaponReload.started -= instance.OnRightMainWeaponReload;
            @RightMainWeaponReload.performed -= instance.OnRightMainWeaponReload;
            @RightMainWeaponReload.canceled -= instance.OnRightMainWeaponReload;
            @UseEquipmentOne.started -= instance.OnUseEquipmentOne;
            @UseEquipmentOne.performed -= instance.OnUseEquipmentOne;
            @UseEquipmentOne.canceled -= instance.OnUseEquipmentOne;
            @UseEquipmentTwo.started -= instance.OnUseEquipmentTwo;
            @UseEquipmentTwo.performed -= instance.OnUseEquipmentTwo;
            @UseEquipmentTwo.canceled -= instance.OnUseEquipmentTwo;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
            @ToggleStrafeThrusters.started -= instance.OnToggleStrafeThrusters;
            @ToggleStrafeThrusters.performed -= instance.OnToggleStrafeThrusters;
            @ToggleStrafeThrusters.canceled -= instance.OnToggleStrafeThrusters;
            @ToggleTargetFocus.started -= instance.OnToggleTargetFocus;
            @ToggleTargetFocus.performed -= instance.OnToggleTargetFocus;
            @ToggleTargetFocus.canceled -= instance.OnToggleTargetFocus;
            @Melee.started -= instance.OnMelee;
            @Melee.performed -= instance.OnMelee;
            @Melee.canceled -= instance.OnMelee;
            @RepairPack.started -= instance.OnRepairPack;
            @RepairPack.performed -= instance.OnRepairPack;
            @RepairPack.canceled -= instance.OnRepairPack;
        }

        public void RemoveCallbacks(IMechControlsActions instance)
        {
            if (m_Wrapper.m_MechControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMechControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_MechControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MechControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MechControlsActions @MechControls => new MechControlsActions(this);

    // PersistentControls
    private readonly InputActionMap m_PersistentControls;
    private List<IPersistentControlsActions> m_PersistentControlsActionsCallbackInterfaces = new List<IPersistentControlsActions>();
    private readonly InputAction m_PersistentControls_Pause;
    private readonly InputAction m_PersistentControls_ToggleInfo;
    public struct PersistentControlsActions
    {
        private @PlayerInput m_Wrapper;
        public PersistentControlsActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pause => m_Wrapper.m_PersistentControls_Pause;
        public InputAction @ToggleInfo => m_Wrapper.m_PersistentControls_ToggleInfo;
        public InputActionMap Get() { return m_Wrapper.m_PersistentControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PersistentControlsActions set) { return set.Get(); }
        public void AddCallbacks(IPersistentControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_PersistentControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PersistentControlsActionsCallbackInterfaces.Add(instance);
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
            @ToggleInfo.started += instance.OnToggleInfo;
            @ToggleInfo.performed += instance.OnToggleInfo;
            @ToggleInfo.canceled += instance.OnToggleInfo;
        }

        private void UnregisterCallbacks(IPersistentControlsActions instance)
        {
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
            @ToggleInfo.started -= instance.OnToggleInfo;
            @ToggleInfo.performed -= instance.OnToggleInfo;
            @ToggleInfo.canceled -= instance.OnToggleInfo;
        }

        public void RemoveCallbacks(IPersistentControlsActions instance)
        {
            if (m_Wrapper.m_PersistentControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPersistentControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_PersistentControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PersistentControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PersistentControlsActions @PersistentControls => new PersistentControlsActions(this);
    public interface IMechControlsActions
    {
        void OnLateralMove(InputAction.CallbackContext context);
        void OnAim(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnLeftMainWeaponFire(InputAction.CallbackContext context);
        void OnLeftMainWeaponReload(InputAction.CallbackContext context);
        void OnRightMainWeaponFire(InputAction.CallbackContext context);
        void OnRightMainWeaponReload(InputAction.CallbackContext context);
        void OnUseEquipmentOne(InputAction.CallbackContext context);
        void OnUseEquipmentTwo(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnToggleStrafeThrusters(InputAction.CallbackContext context);
        void OnToggleTargetFocus(InputAction.CallbackContext context);
        void OnMelee(InputAction.CallbackContext context);
        void OnRepairPack(InputAction.CallbackContext context);
    }
    public interface IPersistentControlsActions
    {
        void OnPause(InputAction.CallbackContext context);
        void OnToggleInfo(InputAction.CallbackContext context);
    }
}
